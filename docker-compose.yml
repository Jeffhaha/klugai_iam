# =============================================================================
# 独立IAM认证授权服务 - 完整部署配置
# Independent IAM Authentication & Authorization Service - Complete Deployment
# =============================================================================

version: '3.8'

# 网络配置
networks:
  iam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  logs:
    driver: local

# 服务配置
services:
  # =============================================================================
  # 数据存储层 / Data Layer
  # =============================================================================
  
  # PostgreSQL主数据库
  postgres:
    image: postgres:15-alpine
    container_name: iam-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: iam_service
      POSTGRES_USER: iam_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-iam_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      TZ: Asia/Shanghai
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/schemas/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/seeds/default_data.sql:/docker-entrypoint-initdb.d/02-seeds.sql:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      iam-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis缓存和会话存储
  redis:
    image: redis:7-alpine
    container_name: iam-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_password_123}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    networks:
      iam-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # =============================================================================
  # 应用服务层 / Application Layer  
  # =============================================================================
  
  # 认证服务
  authentication-service:
    build:
      context: ./services/authentication-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${BUILD_ENV:-production}
    image: iam-auth-service:latest
    container_name: iam-auth-service
    restart: unless-stopped
    environment:
      # 服务配置
      AUTH_HOST: 0.0.0.0
      AUTH_PORT: 8001
      AUTH_WORKERS: ${AUTH_WORKERS:-2}
      AUTH_RELOAD: "false"
      
      # 数据库配置
      DATABASE_URL: postgresql://iam_user:${POSTGRES_PASSWORD:-iam_password_123}@postgres:5432/iam_service
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_POOL_TIMEOUT: ${DATABASE_POOL_TIMEOUT:-30}
      
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-20}
      
      # JWT配置
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_MINUTES: ${JWT_EXPIRATION_MINUTES:-60}
      JWT_REFRESH_EXPIRATION_DAYS: ${JWT_REFRESH_EXPIRATION_DAYS:-30}
      
      # 安全配置
      SECURITY_MAX_FAILED_ATTEMPTS: ${SECURITY_MAX_FAILED_ATTEMPTS:-5}
      SECURITY_LOCKOUT_DURATION_MINUTES: ${SECURITY_LOCKOUT_DURATION_MINUTES:-15}
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # 监控配置
      ENABLE_METRICS: "true"
      METRICS_PORT: 9001
    ports:
      - "${AUTH_SERVICE_PORT:-8001}:8001"
      - "${AUTH_METRICS_PORT:-9001}:9001"
    volumes:
      - ./logs/auth:/app/logs
      - ./config/auth:/app/config:ro
    networks:
      iam-network:
        ipv4_address: 172.20.0.20
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # 授权服务
  authorization-service:
    build:
      context: ./services/authorization-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${BUILD_ENV:-production}
    image: iam-authz-service:latest
    container_name: iam-authz-service
    restart: unless-stopped
    environment:
      # 服务配置
      AUTHZ_HOST: 0.0.0.0
      AUTHZ_PORT: 8002
      AUTHZ_WORKERS: ${AUTHZ_WORKERS:-2}
      AUTHZ_RELOAD: "false"
      
      # 数据库配置
      DATABASE_URL: postgresql://iam_user:${POSTGRES_PASSWORD:-iam_password_123}@postgres:5432/iam_service
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_POOL_TIMEOUT: ${DATABASE_POOL_TIMEOUT:-30}
      
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/1
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-20}
      
      # 缓存配置
      CACHE_ENABLED: "true"
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-300}
      CACHE_MAX_SIZE: ${CACHE_MAX_SIZE:-1000}
      
      # 策略配置
      POLICIES_DEFAULT_EFFECT: deny
      POLICIES_CACHE_ENABLED: "true"
      
      # 审计配置
      AUDIT_ENABLED: "true"
      AUDIT_LOG_LEVEL: INFO
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # 监控配置
      ENABLE_METRICS: "true"
      METRICS_PORT: 9002
    ports:
      - "${AUTHZ_SERVICE_PORT:-8002}:8002"
      - "${AUTHZ_METRICS_PORT:-9002}:9002"
    volumes:
      - ./logs/authz:/app/logs
      - ./config/authz:/app/config:ro
    networks:
      iam-network:
        ipv4_address: 172.20.0.21
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # API网关服务
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${BUILD_ENV:-production}
    image: iam-gateway:latest
    container_name: iam-gateway
    restart: unless-stopped
    environment:
      # 服务配置
      GATEWAY_HOST: 0.0.0.0
      GATEWAY_PORT: 8000
      GATEWAY_WORKERS: ${GATEWAY_WORKERS:-3}
      GATEWAY_RELOAD: "false"
      
      # 后端服务配置
      AUTH_SERVICE_URL: http://authentication-service:8001
      AUTHZ_SERVICE_URL: http://authorization-service:8002
      
      # 超时配置
      SERVICE_TIMEOUT: ${SERVICE_TIMEOUT:-30}
      CONNECTION_TIMEOUT: ${CONNECTION_TIMEOUT:-5}
      
      # 速率限制配置
      RATE_LIMITING_ENABLED: "true"
      RATE_LIMITING_DEFAULT_REQUESTS_PER_MINUTE: ${RATE_LIMITING_RPM:-100}
      RATE_LIMITING_BURST_SIZE: ${RATE_LIMITING_BURST:-20}
      
      # CORS配置
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS:-http://localhost:3000,http://localhost:5173}
      CORS_ALLOW_CREDENTIALS: "true"
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # 监控配置
      ENABLE_METRICS: "true"
      METRICS_PORT: 9000
    ports:
      - "${GATEWAY_PORT:-8000}:8000"
      - "${GATEWAY_METRICS_PORT:-9000}:9000"
    volumes:
      - ./logs/gateway:/app/logs
      - ./config/gateway:/app/config:ro
    networks:
      iam-network:
        ipv4_address: 172.20.0.30
    depends_on:
      authentication-service:
        condition: service_healthy
      authorization-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/gateway/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # =============================================================================
  # 前端服务 / Frontend Service
  # =============================================================================
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - VITE_API_BASE_URL=http://localhost:8000
        - VITE_APP_TITLE=IAM Service
    image: iam-frontend:latest
    container_name: iam-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    volumes:
      - ./logs/frontend:/var/log/nginx
    networks:
      iam-network:
        ipv4_address: 172.20.0.40
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # =============================================================================
  # 监控和日志服务 / Monitoring & Logging Services
  # =============================================================================
  
  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: iam-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      iam-network:
        ipv4_address: 172.20.0.50
    depends_on:
      - api-gateway
      - authentication-service
      - authorization-service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: iam-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-grafana_admin_123}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    networks:
      iam-network:
        ipv4_address: 172.20.0.51
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # 额外监控数据卷
  prometheus-data:
    driver: local
  grafana-data:
    driver: local